$rails generate controller home top

routes.rb
>get "/" => "home#top"




紆余曲折

タイムゾーンはこれで直った
\sample_app\config\initializers\time_formats.rbにファイルを追加
Time::DATE_FORMATS[:default] = '%Y/%m/%d %H:%M'
Time::DATE_FORMATS[:datetime] = '%Y/%m/%d %H:%M'
Time::DATE_FORMATS[:date] = '%Y/%m/%d'
Time::DATE_FORMATS[:time] = '%H:%M:%S'
Date::DATE_FORMATS[:default] = '%Y/%m/%d'

ja.yml追加してソースコード持ってきたらバリデーションのエラーが直った

カラムの確認方法
Post.column_names
select * from posts; (rails dbconsole)

1度作ったマイグレーションファイルは手を出すとすごいめんどくさい

リセットしてマイグレーションファイルを書き直す

rails db:migrateを打ったら上から順番に実行されるので残しておいてOK


st10というDBを作る

rails g model st10 comment:text
st10sテーブルも作られる

St10.column_names

add_column :st10s, :user, :string
user,score1p,score2p,url

カラムは追加できた

inputとselectを混ぜたものを送る方法調べる


数字から始めるのはうんこカス
モデルに数字含めるのもNG




cdでディレクトリ移動してから
git init

git addで追加したいファイルを指定する
git commit -m "何したか"
githubの…or create a new repository on the command line
全部やれ

git status で更新したファイルを確認

git checkout "ファイル名" 前回のセーブデータに戻す
やろうと思えばどこまでも巻き戻せる(別のコマンド)

git push origin mainでアップロードする

────────────────────
st10というモデル削除
st10のカラムも削除
db:migrate関連からやる

リザルト
resultというデータベースを作る
カラム追加する

よし

マイグレーションファイルを生成しているのがモデル

マイグレーションファイルを素にDBが生成される
どっちかがズレるとエラー吐いて死ぬ

rails db:dropでDB削除する
(消す予定の)st10モデルを削除する
st10関連が全部消える
ここでmigrateしてもいいけど、
resultを追加してからmigrateしても良い


    add_column :result, :user, :string
    add_column :result, :score1p, :integer
    add_column :result, :score2p, :integer
    add_column :result, :url, :string
↑t.なんちゃらだった

    rails g model result
    rails g controller result index

p1 p2のカラムも作る


Playerモデルを作る
player
character


Result.column_names
=> ["id", "player1", "score1p",
 "score2p", "url", "comment", "created_at", "updated_at", "player2"]


 userモデルを作らないといけん
 rails g model user

 userモデルに
 name 康隆 
 character (SO)

rails g controller users

コントローラー名は複数形で作る




ビューに渡す条件が@を付ける

eachは配列の中身を1個ずつ取り出す呪文
(配列の中身だけループする)

User.all allは配列で返ってくる
User.first firstは単体で返ってくる

表示させる場合は%=がほしい


     